#react install
    npm install --save typescript @types/node @types/react @types/react-dom @types/jest
    npx create-react-app my-app --template typescript

##기존 project에 typescript 사용하고 싶으면
npm install --save typescript @types/node @types/react @types/react-dom @types/jest

#compile하는법
    terminal에서 tsc -w

#typescipt 사용법
    terminal open 후 tsc -w 라고 입력
    -> 자동 변환됨. 
    (JS 로 변환하는 compile 과정)

#console.log 출력하는법
    1.컴파일 : 터미널에 'tsc'명령어 실행
        - tsc homework.ts
    2.실행 : 터미널에서 'node' 실행
        - node homework.js

#html 파일 만들어 콘솔에 출력 하는 방법
    html 파일 만들고
    <script scr=""></script>


#readonly
    // let 동물 : string |number | undefined; //너무 길다 -> 변수로 뺼수 있음 type

    // let 동물 : Animal = 'dog'; 이런식으로 사용

    //example
    type Animal = {name : string, age : number };
    let 동물 : Animal = {name : 'dog', age : 10}


    //readonly - 그냥 typescript에서만 경고 해주지 JS 에서는 바꿔준다. 
    type Girlfrend = {
    readonly name : string //readonly 란 절대 수정 할 수 없다.
    }
    const 여친 :  Girlfrend = {
        name : '카리나'
    }

    //type변수 uniion 으로 합치기
    type Name = string;
    type Age = number;

    type person = Name | Age; // 합치는거 가능 (person 은 string 아니면 number 들어올수 있다 둘다.)

    type PositionX = { x : number };
    type PositionY = { y : number };

    type NewType = PositionX & PositionY; //object는 and 기호 사용(&)
                                        //속성을 합친다 = object 를 extend 한다.
    let position : NewType = {x:10, y:30 };

    //*type 은 재정의가 불가능 하다!!* 조금 엄격하게 쓸 수 있다.


#callback 함수 개념 설정
    function 함수1(){

    }
    function 함수2(){

    }
    함수1(함수2) -----> 함수1 안에 함수2 넣어서 실행하고싶다.!
    그러면 a파라미터 받아서 a()하면 된다.
    =>>>
    function 함수1(a){
        a()
    }
    function 함수2(){
  
    }  // a() 가 함수2()가 될꺼니까. 이게 콜백 함수의 개념.


############################################################
#react 로 typescipt 만들어 보기
    - JSX (html)문법을 쓰는 파일은 .tsx
    - 일반 문법은 .ts


#typescipt에서 jquery 같은 외부 라이브러리 사용해서 할수 있는 방법
    typescipt 검색해서 그 사이트 들어가서 jquery 보면 된다.
    - npm i @types/jquery 이렇게 terminal에 입력하면
    -> node_modules 가 뜨고 거기에 types들이 들어가 있다.

#implement 키워드
    interface는 object 타입지정할 때 쓴다고 배워봤습니다.
    하지만 용도가 하나 더 있는데 class 타입을 확인하고 싶을 때도 interface 문법을 사용할 수 있습니다. 
    근데 implements 키워드도 필요함 
    
    - implements는 타입지정문법이 아닙니다
    implements라는건 interface에 들어있는 속성을 가지고 있는지 확인만하라는 뜻입니다.
    class에다가 필드와 타입을 할당하고 변형시키고 그런 역할은 아닙니다.
    *결론은 implements는 class의 타입을 체크만 해주는 용도지 할당하는게 아님을 명심합시다. 
    
    Q. 그래서 implements 어따씀?
        이 class가 특정 필드와 함수를 가지고 있는지 확인하고 싶은 경우 간혹 사용합니다.
        예를 들어 클래스끼리 복잡하게 상속하고 그런 경우엔
        이 클래스에 어떤 필드와 함수가 들어있는지 추론하기 힘든 경우가 많습니다.
        그래서 이 class가 특정 필드와 함수같은걸 가지고 있는지 확인하고 체크하고 싶을 때
        class 어쩌구 implements 저쩌구 { } 쓰면 됩니다. 
        클래스를 많이 만들어쓸 때 일종의 가이드북 같은 역할을 해주기도 합니다. 

    Q. extends 는 뭐임?
        class A extends B { } 쓰면 B에 있던 필드와 함수를 A로 복사해줍니다.
        그래서 extends는 클래스끼리 복사할 때 (상속을 구현할 때) 씁니다.
        implements는 상속 그런게 되는 것도 아니고 그냥 체크만 해주는 문법이라 가볍게 타입체크만 할 수 있음
 
